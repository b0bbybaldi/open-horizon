sudo: true
language: bash
services: 
  - docker
dist: xenial
branches:
  only:
    - master

env:
  - BUILD_ARCH=amd64
  - BUILD_ARCH=arm
  - BUILD_ARCH=arm64

addons:
  apt:
    update: true
    sources:
    - sourceline: deb [arch=amd64,armhf,arm64,ppc64el] http://pkg.bluehorizon.network/linux/ubuntu xenial-updates main
      key_url: 'http://pkg.bluehorizon.network/bluehorizon.network-public.key'
    packages:
    - make
    - curl
    - jq
    - ca-certificates
    - gnupg
    - bluehorizon
    - docker-ce
    - qemu
    - qemu-user-static
    - qemu-user
    - binfmt-support
    - dpkg-cross

before_install:
  # enable QEMU emulation
  - >-
    if [ "${BUILD_ARCH}" != 'amd64' ]; then 
      sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
      if [ "${DEBUG:-}" == 'true' ]; then update-binfmts --display; fi
      case "${BUILD_ARCH}" in 
        arm) export DPKG='armhf' LIBC='armel' ;; 
        arm64) export DPKG='aarch64' LIBC='aarch' ;; 
        ppc64el) export DPKG='ppc64le' LIBC='ppc64el' ;; 
      esac
      if [ ! -z "${DPKG:-}" ]; then
        sudo dpkg --add-architecture ${DPKG} && sudo apt-get update
        sudo dpkg-cross -i -a ${BUILD_ARCH} libc6_<version>_${LIBC}.deb
      else
        echo "ERROR: unconfigured architecture: ${BUILD_ARCH}" &> /dev/stderr
        exit 1
      fi
    fi

before_script:
  # check branch
  - >-
    if [ "${TRAVIS_PULL_REQUEST}" == 'false' ]; then 
      export BRANCH="${TRAVIS_BRANCH}"
    else
      export BRANCH="${TRAVIS_PULL_REQUEST_BRANCH}"
    fi
    echo "--- INFO -- $0 $$ -- TRAVIS_BRANCH: ${TRAVIS_BRANCH}; PR: ${PR}; BRANCH: ${BRANCH}"

  # don't do pulls
  - >-
    if [ "${TRAVIS_PULL_REQUEST}" == "false" ]; then 
      echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_LOGIN}" --password-stdin
      echo "${HZN_ORG_ID}" > HZN_ORG_ID
      echo "${DOCKER_NAMESPACE}" > DOCKER_NAMESPACE
      echo "${HZN_EXCHANGE_APIKEY}" > APIKEY
      echo "${PRIVATE_KEY}" | base64 --decode > "${HZN_ORG_ID}.key"
      echo "${PUBLIC_KEY}" | base64 --decode > "${HZN_ORG_ID}.pem"
      if [ ! -z "${TAG}" ]; then echo "${TAG}" > TAG; fi
    fi

script:
  - make build && make test-service

after_success:
  - make push
  - make publish-service
  - make pattern-publish

#before_deploy:
#  - make nodes-clean
#  - make nodes-list
#
#deploy:
#  - make nodes
#
#after_deploy:
#  - make nodes-list
#  - make nodes-test
#
#
