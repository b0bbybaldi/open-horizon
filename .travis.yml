sudo: true
language: bash
services: 
  - docker
dist: bionic

## branches on which we act
branches:
  only:
    - master
    - beta

## environments in which we act
env:
  - BUILD_ARCH=amd64 DEBUG=true BUILD_ON=true TEST_ON=true PUSH_ON=false # PUBLISH_ON=true PATTERN_ON=true
  - BUILD_ARCH=arm64 DEBUG=true EXP=true QEMU=true # BUILD_ON=true TEST_ON=true PUSH_ON=false PUBLISH_ON=false PATTERN_ON=true
  - BUILD_ARCH=arm   DEBUG=true EXP=true QEMU=true # BUILD_ON=true TEST_ON=true PUSH_ON=false PUBLISH_ON=false PATTERN_ON=true

## jobs
jobs:
  include:
    - # comment
      if: branch = beta
      env: TAG=beta

## addons required to act
addons:
  apt:
    update: true
    sources:
    - sourceline: deb [arch=amd64,armhf,arm64,ppc64el] http://pkg.bluehorizon.network/linux/ubuntu xenial-updates main
      key_url: "http://pkg.bluehorizon.network/bluehorizon.network-public.key"
    packages:
    - make
    - git-flow
    - curl
    - jq
    - ca-certificates
    - gnupg
    - bluehorizon
    - docker-ce
    - qemu
    - qemu-user
    - qemu-user-static
    - binfmt-support
    - dpkg-cross

## before installing or doing anything else, do these things:
before_install:
  - if [ ${TRAVIS_PULL_REQUEST} = false ]; then export BRANCH=${TRAVIS_PULL_REQUEST_BRANCH}; else export BRANCH=${TRAVIS_BRANCH}; fi
  # create files from secrets (not for pulls)
  - .travis/travis-setenv.sh ${BRANCH}
  # enable experimental features in Docker
  - if [ ${EXP} = true ]; then ./.travis/docker-enable-experimental.sh; fi
  # enable QEMU emulation
  - if [ ${QEMU} = true ]; then ./.travis/docker-enable-qemu.sh; fi

## after installing, but BEFORE acting, do these things:
before_script:
  # merge in branch
  - if [ ${GIT_MERGE:-false} = true ]; then ./.travis/git-merge.sh; fi

## PERFORM THE ACT
script:
  # check all services
  - if [ ${CHECK_ON:-false} = true ]; then make; fi
  # do the build
  - if [ ${BUILD_ON:-false} = true ]; then make build-service; fi
  # do the test
  - if [ ${TEST_ON:-false} = true ]; then make test-service; fi

## after successful performance, accept accolades and do the following:
after_success:
  # push, publish: services and patterns
  - if [ ${PUSH_ON:-false} = true ]; then make push-service; fi
  - if [ ${PUBLISH_ON:-false} = true ]; then make publish-service; fi

## after failure; at least clean-up
after_failure:
  - if [ ${GIT_UNMERGE:-false} != true ]; then echo "+++ WARN -- $0 $$ -- FAILED: manually rollback changes"; else ./.travis/git-unmerge.sh; fi

#before_deploy:
#  - if [ ${DEPLOY_ON:-false} = true ]; then make nodes-clean && make nodes-list; fi

deploy:
  provider: script
  script:
    - if [ ${PATTERN_ON:-false} = true ]; then make pattern-publish; fi
    - if [ ${DEPLOY_ON:-false} = true ]; then ./.travis/travis-deploy-nodes.sh; fi
  on:
    branch: master

  provider: script
  script:
    # update master on git
    - if [ ${GIT_PUSH:-false} = true ]; then ./.travis/git-push.sh; fi
  on:
    branch: beta

#after_deploy:
#  - if [ ${DEPLOY_ON:-false} = true ]; then make nodes && make nodes-list && make nodes-test; fi
