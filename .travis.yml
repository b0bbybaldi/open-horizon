sudo: true
language: bash
services: 
  - docker
dist: xenial
branches:
  only:
    - master
env:
  - BUILD_ARCH=amd64
#  - BUILD_ARCH=arm
#  - BUILD_ARCH=arm64
addons:
  apt:
    update: true
    sources:
    - sourceline: deb [arch=amd64,armhf,arm64,ppc64el] http://pkg.bluehorizon.network/linux/ubuntu xenial-updates main
      key_url: 'http://pkg.bluehorizon.network/bluehorizon.network-public.key'
    packages:
    - make
    - curl
    - jq
    - ca-certificates
    - gnupg
    - bluehorizon
    - docker-ce
    - qemu
    - binfmt-support
    - qemu-user-static
    - dpkg-cross
# http://wiki.micromint.com/index.php/Debian_ARM_Cross-compile
before_install:
  # https://wiki.debian.org/QemuUserEmulation
  - if [ ${BUILD_ARCH} != 'amd64' ]; then update-binfmts --display; fi
  - if [ ${BUILD_ARCH} == 'arm' ]; then sudo dpkg --add-architecture armhf && sudo apt-get update && dpkg-cross -i -a arm libc6_<version>_armel.deb; fi
  - if [ ${BUILD_ARCH} == 'arm64' ]; then sudo dpkg --add-architecture aarch64 && sudo apt-get update && dpkg-cross -i -a arm64 libc6_<version>_aarch.deb; fi
  # https://dev.to/zeerorg/build-multi-arch-docker-images-on-travis-5428
  # - if [ ${BUILD_ARCH} == 'arm' ]; then sudo docker run --privileged linuxkit/binfmt:v0.6 && sudo docker run -d --privileged -p 1234:1234 --name buildkit moby/buildkit:latest --addr tcp://0.0.0.0:1234 --oci-worker-platform linux/amd64 --oci-worker-platform linux/armhf && sudo docker cp buildkit:/usr/bin/buildctl /usr/bin/ && export BUILDKIT_HOST=tcp://0.0.0.0:1234; fi
before_script:
  - if [ "${TRAVIS_PULL_REQUEST}" = "false" ]; then echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_LOGIN}" --password-stdin; echo "${HZN_ORG_ID}" > HZN_ORG_ID; echo "${DOCKER_NAMESPACE}" > DOCKER_NAMESPACE; echo "${HZN_EXCHANGE_APIKEY}" > APIKEY; echo "${PRIVATE_KEY}" | base64 --decode > "${HZN_ORG_ID}.key"; echo "${PUBLIC_KEY}" | base64 --decode > "${HZN_ORG_ID}.pem"; if [ ! -z "${TAG}" ]; then echo "${TAG}" > TAG; fi; else if [ ! -z "${TAG}" ]; then echo "${TAG}" > TAG; fi; fi
script:
script:
  - export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
  - echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, PR=$PR, BRANCH=$BRANCH"
  - make build && make test-service
after_success:
  - make push
  - make publish-service
  - make pattern-publish
  # - make nodes
  # - make test-nodes until all good
