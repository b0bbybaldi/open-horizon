sudo: true
language: bash
services: 
  - docker
dist: xenial

## branches on which we act
branches:
  only:
    - master
    - beta
    - exp

## environments in which we act
env:
  - BUILD_ARCH=amd64 DEBUG=true BUILD_OFF=false CHECK_OFF=false TEST_OFF=false PUSH_ON=false PUBLISH_OFF=true PATTERN_OFF=true
  - BUILD_ARCH=arm64 DEBUG=true BUILD_OFF=true CHECK_OFF=false TEST_OFF=false PUSH_ON=false PUBLISH_OFF=true PATTERN_OFF=true
  - BUILD_ARCH=arm   DEBUG=true BUILD_OFF=true CHECK_OFF=false TEST_OFF=false PUSH_ON=false PUBLISH_OFF=true PATTERN_OFF=true

## addons required to act
addons:
  apt:
    update: true
    sources:
    - sourceline: deb [arch=amd64,armhf,arm64,ppc64el] http://pkg.bluehorizon.network/linux/ubuntu xenial-updates main
      key_url: 'http://pkg.bluehorizon.network/bluehorizon.network-public.key'
    packages:
    - make
    - curl
    - jq
    - ca-certificates
    - gnupg
    - bluehorizon
    - docker-ce
    - qemu
    - qemu-user
    - qemu-user-static
    - binfmt-support
    - dpkg-cross

## before installing or doing anything else, do these things:
before_install:
  # are we emulating or not (and if we're QEMU we're DEBUG, for now)
  - if [ "${BUILD_ARCH}" != 'amd64' ]; then export QEMU=true DEBUG=true; fi
  # if we're beta we're debug and TAG
  - if [ "${BRANCH}" = 'beta' ]; then export TAG='beta' DEBUG=true; fi
  - if [ "${BRANCH}" = 'exp' ]; then export TAG='exp' DEBUG=true VERBOSE=true; fi
  # branch management
  - if [ ! -z "${TAG}" ]; then echo "${TAG}" > TAG; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then export BRANCH="${TRAVIS_BRANCH}"; else export BRANCH="${TRAVIS_PULL_REQUEST_BRANCH}"; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then export REPO_SLUG="${TRAVIS_REPO_SLUG}"; else export REPO_SLUG="${TRAVIS_PULL_REQUEST_SLUG}"; fi

## after installing, but BEFORE acting, do these things:
before_script:
  # enable QEMU emulation
  - if [ "${QEMU:-}" = 'true' ]; then sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset; fi
  # check branch & create files from secrets (not for pulls)
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${HZN_ORG_ID}" > HZN_ORG_ID; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${DOCKER_NAMESPACE}" > DOCKER_NAMESPACE; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${HZN_EXCHANGE_APIKEY}" > APIKEY; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${PRIVATE_KEY}" | base64 --decode > "${HZN_ORG_ID}.key"; fi
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${PUBLIC_KEY}" | base64 --decode > "${HZN_ORG_ID}.pem"; fi
  # login docker
  - if [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ]; then echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_LOGIN}" --password-stdin; fi
  # test for beta
  - if [ "${BRANCH}" = 'beta' ]; then git pull origin master; fi
  # test for exp
  - if [ "${BRANCH}" = 'exp' ]; then git pull origin beta; fi

### PERFORM THE ACT
script:
  # ensure we're not TAG'd
  - if [ "${BRANCH}" = 'master' ]; then export TAG=; fi
  # check all services
  - if [ "${CHECK_OFF:-}" != 'true' ]; then make; fi
  # do the build
  - if [ "${BUILD_OFF:-}" != 'true' ]; then make build-service; fi
  # do the test
  - if [ "${TEST_OFF:-}" != 'true' ]; then make test-service; fi

## after successful performance, accept accolades and do the following:
after_success:
  # push, publish: services and patterns
  - if [ "${PUSH_ON:-}" = 'true' ]; then make push-service; fi
  - if [ "${PUBLISH_OFF:-}" != 'true' ]; then make publish-service; fi

## after failure; at least clean-up
after_failure:
  - if [ "${ROLLBACK_ON:-}" != 'true' ]; then echo "+++ WARN -- $0 $$ -- FAILED: rollback changes to ${BRANCH}"; else ./sh/rollback.sh ${BRANCH}; fi

#before_deploy:
#  - if [ "${DEPLOY_ON:-}" = 'true' ]; then make nodes-clean && make nodes-list; fi

deploy:
  provider: script
  script:
    - if [ "${PATTERN_OFF:-}" != 'true' ]; then make pattern-publish; fi
    - if [ "${DEPLOY_ON:-}" = 'true' ]; then make nodes; fi
    # update IBM Cloud Registry; ICR_PUBLISH: true
    - if [ "${BRANCH}" = 'master' ] && [ "${TRAVIS_PULL_REQUEST:-}" = 'false' ] && [ "${ICR_PUBLISH:-}" == 'true' ]; then export DOCKER_LOGIN=token DOCKER_REGISTRY=${ICR_REGISTRY} DOCKER_NAMESPACE=${ICR_NAMESPACE} DOCKER_PASSWORD=${ICR_PRIVATE} DOCKER_PUBLICKEY=${ICR_PUBLIC}; if [ "${PUBLISH_OFF:-}" != 'true' ]; then make publish-service; fi; if [ "${PATTERN_OFF:-}" != 'true' ]; then make pattern-publish; fi; fi
  on:
    branch: master
  provider: script
  script:
    # update master on git
    - if [ "${BRANCH}" = 'beta' ] && [ "${TRAVIS_PULL_REQUEST}" = 'false' ]; then git config --global user.email 'travis@travis-ci.org' && git config --global user.name "Travis-CI"; git remote add origin https://${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git; git -a commit -m "merge beta" && git push origin master; fi
  on:
    branch: beta
  provider: script
  script:
    # update beta on git
    - if [ "${BRANCH}" = 'exp' ] && [ "${TRAVIS_PULL_REQUEST}" = 'false' ]; then git config --global user.email 'travis@travis-ci.org' && git config --global user.name "Travis-CI"; git remote add origin https://${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git; git commit -a -m "merge exp" && git push origin beta; fi
  on:
    branch: exp

#after_deploy:
#  - if [ "${DEPLOY_ON:-}" = 'true' ]; then make nodes && make nodes-list && make nodes-test; fi
