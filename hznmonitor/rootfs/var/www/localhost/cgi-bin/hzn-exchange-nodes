#!/bin/bash
APP="hzn"
API="exchange-nodes"

if [ -z ${TMP:-} ]; then if [ -d "/tmpfs" ]; then TMP="/tmpfs"; else TMP="/tmp"; fi; fi
if [ -z ${LOGTO:-} ]; then LOGTO=$TMP/$APP.log; fi
if [ -z ${CU:-} ]; then CU="${HORIZON_CLOUDANT_URL}"; fi
if [ -z ${DB:-} ]; then DB="${APP}-${API}"; fi

if [ "${DEBUG:-}" == 'true' ]; then echo $(date) "$0 $$ -- START" >> $LOGTO 2>&1; fi

###
### dateutils REQUIRED
###

if [ -e /usr/bin/dateutils.dconv ]; then
   dateconv=/usr/bin/dateutils.dconv
elif [ -e /usr/bin/dateconv ]; then
   dateconv=/usr/bin/dateconv
elif [ -e /usr/local/bin/dateconv ]; then
   dateconv=/usr/local/bin/dateconv
else
  echo "No date converter; install dateutils" >> $LOGTO 2>&1
  exit 1
fi

# don't update statistics more than once per (in seconds)
TTL=30
SECONDS=$(date "+%s")
DATE=$(echo $SECONDS \/ $TTL \* $TTL | bc)

if [ -n ${QUERY_STRING:-} ]; then
    id=$(echo "$QUERY_STRING" | sed 's|.*id=\([^&]*\).*|\1|')
    if [[ "$id" == "$QUERY_STRING" ]]; then id=; fi
fi

# standardize QUERY_STRING (rendezvous w/ APP-make-API.csh script)
export QUERY_STRING="id=$id"

## ADDON CONFIGURATION INFORMATION
if [ -z "${ADDON_CONFIG_FILE:-}" ] || [ ! -s "${ADDON_CONFIG_FILE:-}" ]; then
  echo "$0 $$ -- ERROR: cannot find addon configuration file: ${ADDON_CONFIG_FILE:-}" >> $LOGTO 2>&1
  exit 1
fi

## HORIZON CONFIGURATION INFORMATION
HORIZON_EXCHANGE_URL=$(jq -r ".horizon.url" "${ADDON_CONFIG_FILE}")
if [ -z "${HORIZON_EXCHANGE_URL:-}" ]; then 
  echo "$0 $$ -- ERROR: cannot determine horizon exchange URL" >> $LOGTO 2>&1
  exit 1
fi
HORIZON_ORG=$(jq -r ".horizon.org" "${ADDON_CONFIG_FILE}")
if [ -z "${HORIZON_ORG:-}" ]; then 
  echo "$0 $$ -- ERROR: cannot determine horizon exchange organization" >> $LOGTO 2>&1
  exit 1
fi
HORIZON_APIKEY=$(jq -r ".horizon.apikey" "${ADDON_CONFIG_FILE}")
if [ -z "${HORIZON_APIKEY:-}" ]; then 
  echo "$0 $$ -- ERROR: cannot determine horizon exchange API key" >> $LOGTO 2>&1
  exit 1
fi

###
### find all the nodes in the exchange for the specified organization
###

url="${HORIZON_EXCHANGE_URL}/orgs/${HORIZON_ORG}/nodes"
key="${HORIZON_ORG}/iamapikey:${HORIZON_APIKEY}"

# output target
OUTPUT="$TMP/$APP-$API.$$.json"
result=$(curl -sL "$url" -u "$key")
if [[ $(echo "${result}" | jq '.nodes==null') == 'false' ]]; then
  nodes=$(echo "${result}" | jq '.nodes')
  names=$(echo "${nodes}" | jq '[ . | objects | keys[]] | unique' | jq -r '.[]')
  i=0
  echo '{"org":"'${HORIZON_ORG}'","url":"'${HORIZON_EXCHANGE_URL}'","nodes":[' > "${OUTPUT}"
  for name in $names; do
    if [ $i -gt 0 ]; then echo ',' >> "${OUTPUT}"; fi; i=$((i+1))
    echo "${nodes}" | jq '."'"${name}"'"|.id="'${name}'"' >> "${OUTPUT}"
  done 
  echo ']}' >> "${OUTPUT}"
else
  rm -f "${OUTPUT}"
  output=
fi

#
# output
#

echo "Content-Type: application/json; charset=utf-8"
echo "Access-Control-Allow-Origin: *"

if [ -s "${OUTPUT}" ]; then
  age=$((SECONDS - DATE))
  echo "Age: $age"
  refresh=$((TTL - age))
  # check back if using old
  if [ $refresh -lt 0 ]; then refresh=$TTL; fi
  echo "Refresh: $refresh"
  echo "Cache-Control: max-age=$TTL"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- output $OUTPUT Age: $age Refresh: $refresh Size:" $(jq -c '.' "${OUTPUT}")>> $LOGTO 2>&1; fi
  if [ -n "${id}" ]; then
    jq '.nodes[]|select(.name=="'"${id}"'")|.date='"${DATE}" "$OUTPUT"
  else
    jq '.date='"${DATE}" "$OUTPUT"
  fi
  rm -f "${OUTPUT}"
else
  echo "Cache-Control: no-cache"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  if [ -n ${output:-} ]; then
    echo "$output" | jq '.date='"${DATE}"
  else
    echo '{ "error": "not found" }'
  fi
fi

if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- FINISH $QUERY_STRING" >> $LOGTO 2>&1; fi
