#!/bin/bash -v
APP="hzn"
API="result"

if [ -z ${TMP:-} ]; then if [ -d "/tmpfs" ]; then TMP="/tmpfs"; else TMP="/tmp"; fi; fi
if [ -z ${LOGTO:-} ]; then LOGTO=$TMP/$APP.log; fi
if [ -z ${CU:-} ]; then CU="${HORIZON_CLOUDANT_URL}"; fi
if [ -z ${DB:-} ]; then DB="${APP}-${API}"; fi

if [ "${DEBUG:-}" == 'true' ]; then echo $(date) "$0 $$ -- START" >> $LOGTO 2>&1; fi

###
### dateutils REQUIRED
###

if [ -e /usr/bin/dateutils.dconv ]; then
   dateconv=/usr/bin/dateutils.dconv
elif [ -e /usr/bin/dateconv ]; then
   dateconv=/usr/bin/dateconv
elif [ -e /usr/local/bin/dateconv ]; then
   dateconv=/usr/local/bin/dateconv
else
  echo "No date converter; install dateutils" >> $LOGTO 2>&1
  exit 1
fi

# don't update statistics more than once per (in seconds)
TTL=30
SECONDS=$(date "+%s")
DATE=$(echo $SECONDS \/ $TTL \* $TTL | bc)

if [ -n ${QUERY_STRING:-} ]; then
    id=$(echo "$QUERY_STRING" | sed 's/.*id=\([^&]*\).*/\1/')
    if [[ $id == "$QUERY_STRING" ]]; then id=""; fi
    sh=$(echo "$QUERY_STRING" | sed 's/.*sh=\([^&]*\).*/\1/')
    if [[ $sh == "$QUERY_STRING" ]]; then sh=""; fi
fi

if [ -z ${id:-} ]; then id="+"; fi
if [ -z ${sh:-} ]; then sh="+"; fi

# standardize QUERY_STRING (rendezvous w/ APP-make-API.csh script)
export QUERY_STRING="id=${id}&sh=${sh}"

## ADDON CONFIGURATION INFORMATION
if [ -z "${ADDON_CONFIG_FILE:-}" ] || [ ! -s "${ADDON_CONFIG_FILE:-}" ]; then
  echo "$0 $$ -- ERROR: cannot find addon configuration file: ${ADDON_CONFIG_FILE:-}" >> $LOGTO 2>&1
  exit 1
fi

## HORIZON ORG
HORIZON_ORG=$(jq -r '.horizon.org' "${ADDON_CONFIG_FILE}")
if [ -z "${HORIZON_ORG}" ]; then
  echo "$0 $$ -- ERROR: cannot determine horizon org" >> $LOGTO 2>&1
  exit 1
else
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- HORIZON_ORG is ${HORIZON_ORG}" >> $LOGTO 2>&1; fi
fi

## MQTT CONFIGURATION INFORMATION
MQTT_HOST=$(jq -r ".mqtt.host" "${ADDON_CONFIG_FILE}")
if [ -z "${MQTT_HOST:-}" ]; then
  echo "$0 $$ -- ERROR: cannot determine mqtt host" >> $LOGTO 2>&1
  exit 1
else
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT_HOST is ${MQTT_HOST}" >> $LOGTO 2>&1; fi
fi
MQTT_PORT=$(jq -r ".mqtt.port" "${ADDON_CONFIG_FILE}")
if [ -z "${MQTT_PORT:-}" ]; then
  MQTT_PORT=1883
  echo "$0 $$ -- WARN: default MQTT port ${MQTT_PORT}" >> $LOGTO 2>&1
else
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT_PORT is ${MQTT_PORT}" >> $LOGTO 2>&1; fi
fi
VALUE=$(jq -r ".mqtt.username" "${ADDON_CONFIG_FILE}")
if [ ! -z "${VALUE:-}" ]; then
  MQTT_USERPASS="-u ${VALUE}" "-P $(jq -r '.mqtt.password' ${ADDON_CONFIG_FILE})"
else
  MQTT_USERPASS=
fi
if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT_USERPASS ${MQTT_USERPASS}" >> $LOGTO 2>&1; fi

if [ -z "${MQTT_TIMEOUT:-}" ]; then MQTT_TIMEOUT=1; fi
if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT_TIMEOUT ${MQTT_TIMEOUT}" >> $LOGTO 2>&1; fi

if [ -z "${MQTT_TOPIC:-}" ]; then MQTT_TOPIC="${HORIZON_ORG}/${id}/${sh}/result"; fi
if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT_TOPIC ${MQTT_TOPIC}" >> $LOGTO 2>&1; fi

###
### OUTPUT
###

OUTPUT="$TMP/$APP-$API-$QUERY_STRING.$DATE.json"
if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- OUTPUT ${OUTPUT}" >> $LOGTO 2>&1; fi
if [ ! -s "${OUTPUT}" ]; then
  rm -f "${OUTPUT%%.*}".*
  # if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT -- mosquitto_sub -C 1 -W ${MQTT_TIMEOUT} -t ${MQTT_TOPIC} -h ${MQTT_HOST} ${MQTT_USERPASS}" >> $LOGTO 2>&1; fi
  # mosquitto_sub -C 1 -W ${MQTT_TIMEOUT} -t ${MQTT_TOPIC} -h ${MQTT_HOST} ${MQTT_USERPASS} > "${OUTPUT}"
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- MQTT -- mosquitto_sub -C 1 -t ${MQTT_TOPIC} -h ${MQTT_HOST} ${MQTT_USERPASS}" >> $LOGTO 2>&1; fi
  mosquitto_sub -C 1 -t ${MQTT_TOPIC} -h ${MQTT_HOST} ${MQTT_USERPASS} > "${OUTPUT}"
fi

#
# respond
#

echo "Content-Type: application/json; charset=utf-8"
echo "Access-Control-Allow-Origin: *"

if [ -z ${output:-} ] && [ -s "$OUTPUT" ]; then
  age=$((SECONDS - DATE))
  echo "Age: $age"
  refresh=$((TTL - age))
  # check back if using old
  if [ $refresh -lt 0 ]; then refresh=$TTL; fi
  echo "Refresh: $refresh"
  echo "Cache-Control: max-age=$TTL"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  jq -c '.' "$OUTPUT"
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- output $OUTPUT Age: $age Refresh: $refresh" >> $LOGTO 2>&1; fi
else
  echo "Cache-Control: no-cache"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  if [ -n ${output:-} ]; then
    echo "$output"
  else
    echo '{ "error": "not found" }'
  fi
fi

if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- FINISH $QUERY_STRING" >> $LOGTO 2>&1; fi
